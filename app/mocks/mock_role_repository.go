// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/shasw94/projX/app/interfaces (interfaces: IRoleRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/shasw94/projX/app/models"
)

// MockIRoleRepository is a mock of IRoleRepository interface.
type MockIRoleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRoleRepositoryMockRecorder
}

// MockIRoleRepositoryMockRecorder is the mock recorder for MockIRoleRepository.
type MockIRoleRepositoryMockRecorder struct {
	mock *MockIRoleRepository
}

// NewMockIRoleRepository creates a new mock instance.
func NewMockIRoleRepository(ctrl *gomock.Controller) *MockIRoleRepository {
	mock := &MockIRoleRepository{ctrl: ctrl}
	mock.recorder = &MockIRoleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRoleRepository) EXPECT() *MockIRoleRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIRoleRepository) Create(arg0 *models.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIRoleRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIRoleRepository)(nil).Create), arg0)
}

// GetByName mocks base method.
func (m *MockIRoleRepository) GetByName(arg0 string) (*models.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", arg0)
	ret0, _ := ret[0].(*models.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockIRoleRepositoryMockRecorder) GetByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockIRoleRepository)(nil).GetByName), arg0)
}
